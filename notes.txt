requirements :
Makefile, author file
C, Norm

allowed functions :

open, close, read, write, malloc, free

tolerated if necessary :
strerror, exit

---------- openssl

executable : ft_ssl

Standard commands :
	next project ?

Message Digest commands :

options : {
	-p : echo STDIN to STDOUT and append the checksum to STDOUT
		 -q and -p do not modifiy output
		 only applies to STDIN
		> echo "Do not pity the dead, Harry." | ./ft_ssl md5 -p
		Do not pity the dead, Harry.
		2d95365bc44bf0a298e09a3ab7b34d2f

	-q : quiet mode
		does not print name ?

	-r : reverse the format of the input
		> ./ft_ssl md5 file
		MD5 (file) = 53d53ea94217b259c11a5a2d104ec58a
		> ./ft_ssl md5 -r file
		53d53ea94217b259c11a5a2d104ec58a file

	-s : print the sum of the given string (first arg is not a file) (applies only once)
		> ./ft_ssl md5 -s "pity those that aren't following baerista on spotify."
		MD5 ("pity those that aren't following baerista on spotify.") = a3c990a1964705d9bf0e602f44572f5f
		> echo "one more thing" | ./ft_ssl md5 -r -p -s "foo" file -s "bar"
		one more thing
		a0bd1876c6f011dd50fae52827f445f5
		acbd18db4cc2f85cedef654fccc4a4d8 "foo"
		53d53ea94217b259c11a5a2d104ec58a file
		ft_ssl: md5: -s: No such file or directory
		ft_ssl: md5: bar: No such file or directory


	no opt	: read/write from/to the console
}

syntax : {
	./ft_ssl command [files]
}

must support : {
	STDIN
	STDOUT
	files
}

md5 {
	md5
	openssl md5
	./ft_ssl md5

	len : 32 hexadecimal (128 bits) (4 * 32-bit words : A, B, C, D) (4 * 4 bytes)
	Merkle–Damgård construction (https://en.wikipedia.org/wiki/Merkle%E2%80%93Damg%C3%A5rd_construction)

	MD5("") = d41d8cd98f00b204e9800998ecf8427e

	message padding (bits) :
		first bit : 1
		as many 0 necessary to obtain a length up to 64 bits (8 bytes) fewer than a multiple of 512 (64 bytes)
		64 bits (8 bytes) representing the length of the message, modulo 2^64
	split into 512-bit blocks (16*32-bit words)

	main algorithm :
		A, B, C, D initialized to predetermined fixed constants
		for each 512-bit block : modify the state in four rounds
		each round is composed of 16 similar operations based on a non-linear function F, modular addition, and left rotation
		avalanche effect
		{
			possible functions :
			values in little-endian

			F(B, C, D) = (B & C) | (~B & D)
			G(B, C, D) = (B & D) | (C & ~D)
			H(B, C, D) = B ^ C ^ D
			I(B, C, D) = C ^ (B | ~D)
		}
		{
			& 	bitwise AND
			| 	bitwise inclusive OR
			^ 	bitwise XOR (exclusive OR)
			<< 	left shift
			>> 	right shift
			~ 	bitwise NOT (one's complement) (unary)
		}

	a = 0x67452301
	b = 0xefcdab89
	c = 0x98badcfe
	d = 0x10325476

	abcd -> dabc -> cdab -> bcda

	f : 7 12 17 22
	0xd76aa478, 0xe8c7b756, 0x242070db, 0xc1bdceee
	0xf57c0faf, 0x4787c62a, 0xa8304613, 0xfd469501
	0x698098d8, 0x8b44f7af, 0xffff5bb1, 0x895cd7be
	0x6b901122, 0xfd987193, 0xa679438e, 0x49b40821
	g : 5 9 14 20
	0xf61e2562, 0xc040b340, 0x265e5a51, 0xe9b6c7aa
	0xd62f105d, 0x02441453, 0xd8a1e681, 0xe7d3fbc8
	0x21e1cde6, 0xc33707d6, 0xf4d50d87, 0x455a14ed
	0xa9e3e905, 0xfcefa3f8, 0x676f02d9, 0x8d2a4c8a
	h : 4 11 7 23
	0xfffa3942, 0x8771f681, 0x6d9d6122, 0xfde5380c
	0xa4beea44, 0x4bdecfa9, 0xf6bb4b60, 0xbebfbc70
	0x289b7ec6, 0xeaa127fa, 0xd4ef3085, 0x04881d05
	0xd9d4d039, 0xe6db99e5, 0x1fa27cf8, 0xc4ac5665
	i : 6 10 15 21
	0xf4292244, 0x432aff97, 0xab9423a7, 0xfc93a039
	0x655b59c3, 0x8f0ccc92, 0xffeff47d, 0x85845dd1
	0x6fa87e4f, 0xfe2ce6e0, 0xa3014314, 0x4e0811a1
	0xf7537e82, 0xbd3af235, 0x2ad7d2bb, 0xeb86d391

        bytes < 4104 = ok
4104 <= bytes < 4107 = false
4107 <= bytes        = error // sauf si printf

64 * 64 = 4096	= 32768 bits
	4104 = +8	= 32832 bits
	4107 = +10	= 32856 bits
64 * 65 = 4160	= 33280 bits
*** Error in `./ft_ssl': free(): invalid next size (normal): 0x000000000130d020 ***
 err binary files

}



sha256 {
	sha256 (man unavailable on macs)
	openssl sha -256
	./ft_ssl sha256

	test with shasum

	len : 64
}

bonus {
	sha512
	whirlpool
}

Cipher commands :
	next project ?